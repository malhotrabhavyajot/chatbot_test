{"ast":null,"code":"var _jsxFileName = \"/workspaces/chatbot_test/snowflake-react-chat/src/components/ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const chatRef = useRef();\n  useEffect(() => {\n    const greeting = `Hello ðŸ‘‹! How may I assist you?`;\n    setMessages([{\n      role: 'assistant',\n      text: greeting\n    }]);\n  }, []);\n  const handleSend = () => {\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      role: 'user',\n      text: input\n    }];\n    setMessages(newMessages);\n    setInput('');\n\n    // Simulate assistant reply\n    setTimeout(() => {\n      const reply = `You said: ${input}`;\n      setMessages([...newMessages, {\n        role: 'assistant',\n        text: reply\n      }]);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Field \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          style: {\n            color: '#94d6f2'\n          },\n          children: \"Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"chatbox\",\n      ref: chatRef,\n      children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `chat ${msg.role === 'user' ? 'outgoing' : 'incoming'}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Enter a message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: e => e.key === 'Enter' && !e.shiftKey && handleSend()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-rounded\",\n        onClick: handleSend,\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"M4SfreQfJzQnfVUq+PgQ4e5mhlI=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","input","setInput","chatRef","greeting","role","text","handleSend","trim","newMessages","setTimeout","reply","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","msg","idx","placeholder","value","onChange","e","target","onKeyDown","key","shiftKey","onClick","_c","$RefreshReg$"],"sources":["/workspaces/chatbot_test/snowflake-react-chat/src/components/ChatBot.js"],"sourcesContent":["\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/style.css';\n\nconst ChatBot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const chatRef = useRef();\n\n  useEffect(() => {\n    const greeting = `Hello ðŸ‘‹! How may I assist you?`;\n    setMessages([{ role: 'assistant', text: greeting }]);\n  }, []);\n\n  const handleSend = () => {\n    if (!input.trim()) return;\n    const newMessages = [...messages, { role: 'user', text: input }];\n    setMessages(newMessages);\n    setInput('');\n\n    // Simulate assistant reply\n    setTimeout(() => {\n      const reply = `You said: ${input}`;\n      setMessages([...newMessages, { role: 'assistant', text: reply }]);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <header>\n        <h3>Field <strong style={{ color: '#94d6f2' }}>Assistant</strong></h3>\n      </header>\n      <ul className=\"chatbox\" ref={chatRef}>\n        {messages.map((msg, idx) => (\n          <li key={idx} className={`chat ${msg.role === 'user' ? 'outgoing' : 'incoming'}`}>\n            <p>{msg.text}</p>\n          </li>\n        ))}\n      </ul>\n      <div className=\"chat-input\">\n        <textarea\n          placeholder=\"Enter a message...\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={(e) => e.key === 'Enter' && !e.shiftKey && handleSend()}\n        ></textarea>\n        <span className=\"material-symbols-rounded\" onClick={handleSend}>send</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBot;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMS,OAAO,GAAGV,MAAM,CAAC,CAAC;EAExBD,SAAS,CAAC,MAAM;IACd,MAAMY,QAAQ,GAAG,iCAAiC;IAClDJ,WAAW,CAAC,CAAC;MAAEK,IAAI,EAAE,WAAW;MAAEC,IAAI,EAAEF;IAAS,CAAC,CAAC,CAAC;EACtD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAI,CAACN,KAAK,CAACO,IAAI,CAAC,CAAC,EAAE;IACnB,MAAMC,WAAW,GAAG,CAAC,GAAGV,QAAQ,EAAE;MAAEM,IAAI,EAAE,MAAM;MAAEC,IAAI,EAAEL;IAAM,CAAC,CAAC;IAChED,WAAW,CAACS,WAAW,CAAC;IACxBP,QAAQ,CAAC,EAAE,CAAC;;IAEZ;IACAQ,UAAU,CAAC,MAAM;MACf,MAAMC,KAAK,GAAG,aAAaV,KAAK,EAAE;MAClCD,WAAW,CAAC,CAAC,GAAGS,WAAW,EAAE;QAAEJ,IAAI,EAAE,WAAW;QAAEC,IAAI,EAAEK;MAAM,CAAC,CAAC,CAAC;IACnE,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACEf,OAAA;IAAKgB,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBjB,OAAA;MAAAiB,QAAA,eACEjB,OAAA;QAAAiB,QAAA,GAAI,QAAM,eAAAjB,OAAA;UAAQkB,KAAK,EAAE;YAAEC,KAAK,EAAE;UAAU,CAAE;UAAAF,QAAA,EAAC;QAAS;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC,eACTvB,OAAA;MAAIgB,SAAS,EAAC,SAAS;MAACQ,GAAG,EAAEjB,OAAQ;MAAAU,QAAA,EAClCd,QAAQ,CAACsB,GAAG,CAAC,CAACC,GAAG,EAAEC,GAAG,kBACrB3B,OAAA;QAAcgB,SAAS,EAAE,QAAQU,GAAG,CAACjB,IAAI,KAAK,MAAM,GAAG,UAAU,GAAG,UAAU,EAAG;QAAAQ,QAAA,eAC/EjB,OAAA;UAAAiB,QAAA,EAAIS,GAAG,CAAChB;QAAI;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC,GADVI,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAER,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLvB,OAAA;MAAKgB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBjB,OAAA;QACE4B,WAAW,EAAC,oBAAoB;QAChCC,KAAK,EAAExB,KAAM;QACbyB,QAAQ,EAAGC,CAAC,IAAKzB,QAAQ,CAACyB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC1CI,SAAS,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAI,CAACH,CAAC,CAACI,QAAQ,IAAIxB,UAAU,CAAC;MAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1D,CAAC,eACZvB,OAAA;QAAMgB,SAAS,EAAC,0BAA0B;QAACoB,OAAO,EAAEzB,UAAW;QAAAM,QAAA,EAAC;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACrB,EAAA,CA9CID,OAAO;AAAAoC,EAAA,GAAPpC,OAAO;AAgDb,eAAeA,OAAO;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}