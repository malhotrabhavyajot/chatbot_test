{"ast":null,"code":"var _jsxFileName = \"/workspaces/chatbot_test/snowflake-react-chat/src/components/ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/style.css';\nimport { ReactComponent as ChatIcon } from '../assets/chat-icon.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const chatRef = useRef();\n  useEffect(() => {\n    if (isOpen) {\n      const greeting = `Hello 👋! I'm your Field Assistant. How can I help you today?`;\n      setMessages([{\n        role: 'assistant',\n        text: greeting\n      }]);\n    }\n  }, [isOpen]);\n  const scrollToBottom = () => {\n    setTimeout(() => {\n      if (chatRef.current) {\n        chatRef.current.scrollTop = chatRef.current.scrollHeight;\n      }\n    }, 100);\n  };\n  const sendToSnowflakeAPI = async message => {\n    try {\n      const res = await fetch('http://localhost:4000/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: message\n        })\n      });\n      if (!res.ok) throw new Error('Request failed');\n      const data = await res.json();\n      const rows = data.rows || [];\n      if (rows.length === 0) return '🔍 No results found.';\n      const formatted = rows.map((row, i) => `🔹 ${JSON.stringify(row, null, 2)}`).join('\\n\\n');\n      return formatted;\n    } catch (err) {\n      console.error('API error:', err);\n      return '⚠️ Unable to connect to the backend. Please try again later.';\n    }\n  };\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const userMessage = input.trim();\n    const newMessages = [...messages, {\n      role: 'user',\n      text: userMessage\n    }];\n    setMessages(newMessages);\n    setInput('');\n    scrollToBottom();\n    const pendingResponse = {\n      role: 'assistant',\n      text: '⏳ Working on your request...'\n    };\n    setMessages([...newMessages, pendingResponse]);\n    const response = await sendToSnowflakeAPI(userMessage);\n    setMessages([...newMessages, {\n      role: 'assistant',\n      text: response\n    }]);\n    scrollToBottom();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-toggler\",\n      onClick: () => setIsOpen(!isOpen),\n      \"aria-label\": \"Toggle chatbot\",\n      children: isOpen ? '✖' : /*#__PURE__*/_jsxDEV(ChatIcon, {\n        className: \"chat-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\uD83E\\uDD16 ORION \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            style: {\n              color: '#94d6f2'\n            },\n            children: \"Field Assistant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"chatbox\",\n        ref: chatRef,\n        children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `chat ${msg.role === 'user' ? 'outgoing' : 'incoming'}`,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Type your question here...\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: e => e.key === 'Enter' && !e.shiftKey && handleSend()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-symbols-rounded\",\n          onClick: handleSend,\n          title: \"Send message\",\n          children: \"send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatBot, \"CWe3i9JlTBtmqpy/6GoieSFZp8c=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useEffect","useRef","useState","ReactComponent","ChatIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBot","_s","messages","setMessages","input","setInput","isOpen","setIsOpen","chatRef","greeting","role","text","scrollToBottom","setTimeout","current","scrollTop","scrollHeight","sendToSnowflakeAPI","message","res","fetch","method","headers","body","JSON","stringify","query","ok","Error","data","json","rows","length","formatted","map","row","i","join","err","console","error","handleSend","trim","userMessage","newMessages","pendingResponse","response","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","color","ref","msg","idx","placeholder","value","onChange","e","target","onKeyDown","key","shiftKey","title","_c","$RefreshReg$"],"sources":["/workspaces/chatbot_test/snowflake-react-chat/src/components/ChatBot.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport '../styles/style.css';\nimport { ReactComponent as ChatIcon } from '../assets/chat-icon.svg';\n\nconst ChatBot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const chatRef = useRef();\n\n  useEffect(() => {\n    if (isOpen) {\n      const greeting = `Hello 👋! I'm your Field Assistant. How can I help you today?`;\n      setMessages([{ role: 'assistant', text: greeting }]);\n    }\n  }, [isOpen]);\n\n  const scrollToBottom = () => {\n    setTimeout(() => {\n      if (chatRef.current) {\n        chatRef.current.scrollTop = chatRef.current.scrollHeight;\n      }\n    }, 100);\n  };\n\n  const sendToSnowflakeAPI = async (message) => {\n    try {\n      const res = await fetch('http://localhost:4000/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ query: message })\n      });\n\n      if (!res.ok) throw new Error('Request failed');\n\n      const data = await res.json();\n      const rows = data.rows || [];\n      if (rows.length === 0) return '🔍 No results found.';\n\n      const formatted = rows.map((row, i) => `🔹 ${JSON.stringify(row, null, 2)}`).join('\\n\\n');\n      return formatted;\n    } catch (err) {\n      console.error('API error:', err);\n      return '⚠️ Unable to connect to the backend. Please try again later.';\n    }\n  };\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const userMessage = input.trim();\n    const newMessages = [...messages, { role: 'user', text: userMessage }];\n    setMessages(newMessages);\n    setInput('');\n    scrollToBottom();\n\n    const pendingResponse = { role: 'assistant', text: '⏳ Working on your request...' };\n    setMessages([...newMessages, pendingResponse]);\n\n    const response = await sendToSnowflakeAPI(userMessage);\n    setMessages([...newMessages, { role: 'assistant', text: response }]);\n    scrollToBottom();\n  };\n\n  return (\n    <>\n      <button\n        className=\"chatbot-toggler\"\n        onClick={() => setIsOpen(!isOpen)}\n        aria-label=\"Toggle chatbot\"\n      >\n        {isOpen ? '✖' : <ChatIcon className=\"chat-icon\" />}\n      </button>\n\n      {isOpen && (\n        <div className=\"chatbot\">\n          <header>\n            <h3>🤖 ORION <strong style={{ color: '#94d6f2' }}>Field Assistant</strong></h3>\n          </header>\n          <ul className=\"chatbox\" ref={chatRef}>\n            {messages.map((msg, idx) => (\n              <li key={idx} className={`chat ${msg.role === 'user' ? 'outgoing' : 'incoming'}`}>\n                <p>{msg.text}</p>\n              </li>\n            ))}\n          </ul>\n          <div className=\"chat-input\">\n            <textarea\n              placeholder=\"Type your question here...\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && !e.shiftKey && handleSend()}\n            ></textarea>\n            <span className=\"material-symbols-rounded\" onClick={handleSend} title=\"Send message\">send</span>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}